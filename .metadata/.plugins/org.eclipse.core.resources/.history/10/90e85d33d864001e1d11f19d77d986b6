/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "adc.h"
#include "rng.h"
#include "spi.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "ILI9341_Touchscreen.h"
#include "ILI9341_STM32_Driver.h"
#include "ILI9341_GFX.h"
#include "ILI9341_Sprite.h"
#include "snow_tiger.h"
#include "string.h"
#include "stdbool.h"
#include "stdio.h"
#include "math.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define TILE_NEW_HEIGHT 56
#define TILE_NEW_WIDTH 38
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
// array size is 4256
const uint16_t tile_new[] = {
    0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xe75d, 0xe71c, 0xe73c, 0xe71c, 0x9cb2, 0x83ee, 0x8c50, 0x8c4f, 0x8c2f, 0x8c50, 0x9c91, 0xce59, 0xe75d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d,
    0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xe75d, 0xe75d, 0xe73d, 0xce79, 0x9471, 0xacf3, 0xbd95, 0xa4d2, 0xacd1, 0xad11, 0xad11, 0xb532, 0xbdb6, 0xbdd6, 0xad34, 0xd69a, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d,
    0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xa514, 0x8c30, 0x8c10, 0x8c10, 0x942f, 0xad10, 0xbd31, 0xbd52, 0xbd72, 0xc591, 0xbd91, 0xc592, 0xc5d4, 0xc5b4, 0x9450, 0xce38, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xe75d, 0xe75d, 0xe75d, 0xef5d, 0xef5d,
    0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xbdf7, 0xbd96, 0x630c, 0x4a28, 0x5a48, 0x8bcd, 0xad11, 0xbd71, 0xacef, 0xb530, 0xc5d4, 0xce16, 0xc5d4, 0xc592, 0xc591, 0xbd51, 0x8c0e, 0xc618, 0xef5d, 0xdedb, 0xad55, 0xad54, 0xbd95, 0xbd95, 0xbdb5, 0xbdb5, 0xce58, 0xe73d, 0xef5d, 0xef5d,
    0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xe71c, 0xd69a, 0xce58, 0x9cb1, 0x9cb2, 0x7bae, 0x5289, 0x4a06, 0x9c6e, 0xbd51, 0xbd71, 0x83ac, 0xa48e, 0xcdf5, 0xce38, 0xce16, 0xc592, 0xc591, 0xb531, 0x736b, 0xa4f3, 0xce38, 0xbdb5, 0x8bee, 0x940e, 0xa48e, 0xa4d1, 0xad12, 0xa4b0, 0xbd94, 0xe73d, 0xef5d, 0xef5d,
    0xef5d, 0xef5d, 0xef5d, 0xef5d, 0xdefb, 0xbdd6, 0xad13, 0x9c90, 0xad12, 0xc5d5, 0xce79, 0x8c51, 0x39a4, 0x8bec, 0xacef, 0xaccf, 0x5227, 0x8bec, 0xbd71, 0xc5d4, 0xc5f6, 0xb510, 0xb510, 0xa4af, 0x4a06, 0x62a9, 0x942e, 0xa48f, 0xacf0, 0xbd71, 0xc591, 0xce16, 0xce59, 0xb533, 0xbd95, 0xe75d, 0xef5d, 0xef5d,
    0xef5d, 0xef5d, 0xef5d, 0xdefc, 0xbdd6, 0x9470, 0xad32, 0xbd51, 0xbd71, 0xbd52, 0xce16, 0x8c50, 0x2944, 0x6ac9, 0x8bcc, 0x8bcc, 0x5207, 0x838b, 0xaccf, 0xad11, 0xa4f2, 0x8bec, 0x8bec, 0x838b, 0x3984, 0x6ae9, 0xaccf, 0xbd71, 0xbd71, 0xbd91, 0xc591, 0xc592, 0xbdd5, 0x9cb1, 0xb554, 0xe75d, 0xef5d, 0xef5d,
    0xef5d, 0xef5d, 0xef5d, 0xa514, 0x8c30, 0xbd53, 0xc572, 0xc591, 0xbd51, 0xa48e, 0xb510, 0x7bac, 0x20e3, 0x4185, 0x5a48, 0x5a88, 0x5a68, 0x41a6, 0x3944, 0x3144, 0x49a6, 0x6268, 0x6288, 0x5a48, 0x2923, 0x6ae9, 0xacf0, 0xbd71, 0xbd71, 0xc591, 0xc591, 0xbd51, 0x838b, 0x3985, 0x736d, 0xe73d, 0xef5d, 0xef5d,
    0xef5d, 0xe75d, 0xe71c, 0x9cb2, 0x8c0e, 0xbd72, 0xbd71, 0xbd71, 0x8bec, 0x5247, 0x3164, 0x2943, 0x18e2, 0x2103, 0x2923, 0x2123, 0x4a07, 0x6ae9, 0x942d, 0x9c6e, 0xa48f, 0xacd0, 0xacf0, 0x8bcc, 0x62c9, 0x41c6, 0x39a5, 0x41e6, 0x7b2a, 0x8bec, 0x940d, 0x8bcc, 0x4a06, 0x8b04, 0xcd4e, 0xe73d, 0xe75d, 0xef5d,
    0xef5d, 0xe73c, 0xb596, 0xa4d2, 0xad12, 0xc571, 0xbd51, 0xa48e, 0x5247, 0x2943, 0x2123, 0x2964, 0x39e4, 0x5307, 0x52e7, 0x2963, 0x2944, 0x39a4, 0x4a26, 0x5247, 0x62c9, 0x83ac, 0x9c6e, 0xacf0, 0xa48f, 0x8c0d, 0x734a, 0x5a88, 0x3184, 0x41c5, 0x5227, 0x5207, 0x2923, 0x49c3, 0x944e, 0xe73d, 0xe75d, 0xef5d,
    0xe75d, 0xe71c, 0x9c92, 0xa4b1, 0xc592, 0xc591, 0xb530, 0x940d, 0x2923, 0x2943, 0x5b08, 0x73e9, 0x94ee, 0xbdf5, 0xb5d4, 0x6368, 0x2963, 0x5227, 0x8bed, 0x944e, 0x6b0a, 0x2943, 0x3184, 0x41e5, 0x41e5, 0x6ac9, 0x83ac, 0x940d, 0x944e, 0x944e, 0x9c4e, 0x5a68, 0x2924, 0x2103, 0x6b8d, 0xe73d, 0xe75d, 0xe75d,
    0xe73c, 0xc638, 0xa4f2, 0xb553, 0xc5d5, 0xc5d5, 0xb553, 0x62c9, 0x2943, 0x31c4, 0x7409, 0x952e, 0xbe14, 0xd69a, 0xce79, 0x94cf, 0x4206, 0x4a26, 0x7b8b, 0x83cc, 0x732a, 0x4a06, 0x5267, 0x5287, 0x5287, 0x4a06, 0x5a68, 0x6b09, 0x8bed, 0x9c4e, 0xacef, 0x83cc, 0x6b2b, 0x630b, 0x94b3, 0xdf1d, 0xe73d, 0xe75d,
    0xdefb, 0x8c30, 0xa4d1, 0xc5d5, 0xce37, 0xce58, 0xb595, 0x2123, 0x4225, 0x5b07, 0x94ec, 0xadb0, 0xc637, 0xd679, 0xce79, 0xbdf4, 0x636a, 0x31a4, 0x18c2, 0x20c2, 0x5207, 0x838c, 0x9c4e, 0x9c6e, 0x9c6e, 0x62a8, 0x4a47, 0x5288, 0x5269, 0x49e6, 0x62c8, 0x944e, 0xbd94, 0xce37, 0xce7a, 0xcefd, 0xe73d, 0xe75d,
    0xdefb, 0x7bae, 0x8c0e, 0xb531, 0xbd72, 0xc5b4, 0xb573, 0x39c5, 0x52a6, 0x6368, 0x848b, 0x94ec, 0xa56f, 0xbdf5, 0xbdf5, 0x8ccc, 0x73c9, 0x4a66, 0x2102, 0x20c2, 0x41a6, 0x5a68, 0x5a68, 0x5a48, 0x5a48, 0x734b, 0x9c6f, 0xacf2, 0x8c50, 0x4a48, 0x18c2, 0x5a68, 0x942e, 0xacf0, 0xb595, 0xcedd, 0xe73d, 0xe75d,
    0xdefb, 0x8c50, 0xbdb6, 0xc5d5, 0xb530, 0xb531, 0x9caf, 0x39c5, 0x39e5, 0x52a6, 0x6347, 0x6ba8, 0x846a, 0x846b, 0x846b, 0x6347, 0x4245, 0x39c5, 0x18e2, 0x20c2, 0x49a6, 0x5a68, 0x4a08, 0x4a28, 0x4a28, 0x62ec, 0x6b2d, 0x6b0c, 0x83ee, 0xad54, 0x18c2, 0x5247, 0x7b8b, 0x7b2b, 0x8c51, 0xc6dd, 0xe73d, 0xe75d,
    0xe73d, 0xe71c, 0xbdd7, 0x5aaa, 0x2102, 0x18e2, 0x2102, 0x39c5, 0x52e7, 0x6ba8, 0x950c, 0x9d6c, 0x9d6c, 0x9d6d, 0x9d4c, 0x9d2c, 0x7c2a, 0x4a86, 0x2103, 0x20e3, 0x41a6, 0x5248, 0x41e7, 0x83f0, 0x8410, 0xb596, 0x736e, 0x4a07, 0x6b0a, 0x7b8c, 0x18c2, 0x5228, 0x6289, 0x5228, 0x73b0, 0xb65c, 0xc69c, 0xdf1d,
    0xe73d, 0xe71c, 0xb596, 0x8c71, 0x736c, 0x4a06, 0x4a07, 0x5248, 0x4206, 0x52c6, 0x740a, 0x846a, 0x848a, 0x848a, 0x846a, 0x6388, 0x4aa6, 0x3184, 0x3185, 0x39a6, 0x49e7, 0x41e7, 0x2123, 0x7baf, 0x83d0, 0x9452, 0x5269, 0x3986, 0x6b0c, 0x6b2c, 0x39a6, 0x62ab, 0x62ec, 0x6b2d, 0x83f0, 0x9cf4, 0xa536, 0xcedc,
    0xe73d, 0xe73c, 0xd6ba, 0xb575, 0x840f, 0x6288, 0x6289, 0x6289, 0x3965, 0x39c5, 0x4246, 0x52c6, 0x6347, 0x6347, 0x6347, 0x3a05, 0x39c5, 0x39a5, 0x41e7, 0x4a29, 0x5aab, 0x5249, 0x18c2, 0x31a6, 0x4a49, 0x5a8a, 0x526a, 0x5aab, 0x7baf, 0x7baf, 0x5acb, 0x7b8f, 0x7bcf, 0xa514, 0xbdd7, 0xad55, 0x9cd4, 0xc69c,
    0xe73c, 0xe73c, 0xe73d, 0xbdd7, 0xa513, 0xa4b1, 0x8bcc, 0x83ac, 0x5a47, 0x3164, 0x18e2, 0x18e2, 0x2963, 0x39e5, 0x39e4, 0x18e2, 0x18e2, 0x20e2, 0x20e3, 0x2103, 0x2123, 0x2103, 0x18c2, 0x18c2, 0x39a6, 0x5a8a, 0x736e, 0x83d0, 0x7baf, 0x6b2d, 0x4a29, 0x630c, 0x6b2d, 0x736e, 0x7baf, 0x738e, 0x8c31, 0xcebb,
    0xe73d, 0xe73d, 0xe73d, 0xce59, 0xbdd6, 0xad53, 0x9c6f, 0x942d, 0x5a68, 0x3985, 0x20e3, 0x3164, 0x5aa8, 0x5aea, 0x39a5, 0x3186, 0x3186, 0x3186, 0x3185, 0x3185, 0x39a6, 0x4208, 0x52aa, 0x20e3, 0x41e7, 0x630c, 0x7bd0, 0x8410, 0x7bb0, 0x734e, 0x526a, 0x6b4d, 0x736e, 0x83f0, 0x8c31, 0x83f0, 0x8431, 0xcebb,
    0xe73d, 0xe73d, 0xe73d, 0xe73d, 0xdedb, 0xb596, 0x9490, 0x8c2f, 0x41e7, 0x4a28, 0x3986, 0x6288, 0xb531, 0xa4f2, 0x5248, 0x62ab, 0x62cb, 0x62cb, 0x62ab, 0x62cb, 0x6aec, 0x736d, 0x83ef, 0x6b6d, 0x4a49, 0x4a29, 0x5269, 0x5aab, 0x6b2d, 0x5aaa, 0x526a, 0x62eb, 0x62ec, 0x7bae, 0x840f, 0x7bce, 0x8c51, 0xd6db,
    0xe73d, 0xe73d, 0xe73d, 0xe73d, 0xe73d, 0xc638, 0x9471, 0x9471, 0x39c6, 0x528a, 0x49e8, 0x5a48, 0x942e, 0xad12, 0x7b6d, 0x734c, 0x732c, 0x62ca, 0x6aea, 0x732a, 0x6aeb, 0x5a48, 0x4185, 0x9cd2, 0x4207, 0x18e2, 0x2103, 0x3186, 0x5aab, 0x41e7, 0x52aa, 0x5aca, 0x52aa, 0x52a9, 0x5289, 0x5aeb, 0x94b2, 0xdefb,
    0xe73c, 0xe73c, 0xe73c, 0xe73c, 0xe73c, 0xe73c, 0xe73c, 0xe73c, 0x52aa, 0x736d, 0x734e, 0x526a, 0x6aeb, 0xce79, 0xce79, 0xce79, 0xce59, 0x8bef, 0xa48f, 0xbdb4, 0xa4f3, 0x6289, 0x6268, 0x3124, 0x20c2, 0x39c6, 0x5269, 0x62eb, 0x8c51, 0x9cb3, 0xe73c, 0xe73c, 0xe73c, 0xe73c, 0xe73c, 0xe73c, 0xe73c, 0xe73c,
    0xe73c, 0xe73d, 0xe73c, 0xe73c, 0xe73c, 0xe73c, 0xe73c, 0xe73c, 0xdedb, 0x738d, 0x6b2d, 0x732d, 0x6ae9, 0x9c6e, 0xbd71, 0xbd91, 0xbd72, 0x838c, 0x7b4b, 0x940c, 0x8bed, 0x5207, 0x3124, 0x18c2, 0x2944, 0xa535, 0x9cb3, 0x7bef, 0xad35, 0xad55, 0xe73c, 0xe73c, 0xe73c, 0xe73c, 0xe73c, 0xe73c, 0xe73c, 0xe73c,
    0xe73d, 0xef5d, 0xe75d, 0xe73c, 0xe73c, 0xe73c, 0xe73c, 0xe73c, 0xdedb, 0x73ae, 0x5269, 0x5249, 0x5a48, 0x9c4e, 0xbd51, 0xbd71, 0xbd71, 0x838c, 0x5207, 0x5207, 0x49e6, 0x2923, 0x20e2, 0x2123, 0x8430, 0xce9a, 0xa4f3, 0x840f, 0x9cd3, 0xa4f3, 0xe73c, 0xe73c, 0xe73c, 0xe73c, 0xe73c, 0xe73c, 0xe73c, 0xe73c,
    0xef9d, 0xf79e, 0xef9e, 0xef5d, 0xe73c, 0xe73c, 0xe73c, 0xe73c, 0xe71c, 0xce7a, 0x5289, 0x3145, 0x3945, 0x41c6, 0x49e6, 0x51e7, 0x49e7, 0x41a6, 0x5207, 0x5a48, 0x5a48, 0x5a68, 0x7b6a, 0x3165, 0xad55, 0xdf1c, 0xd6db, 0xd6ba, 0xd6ba, 0xdedb, 0xe73c, 0xe73d, 0xe73d, 0xe73d, 0xe73c, 0xe73c, 0xe73c, 0xe73c,
    0xf79e, 0xf79e, 0xf79e, 0xef7d, 0xef5d, 0xe73c, 0xe73c, 0xe73c, 0xe73c, 0xdf1c, 0x52aa, 0x2123, 0x20e3, 0x20e3, 0x20e3, 0x20e3, 0x20e3, 0x20e3, 0x2924, 0x3164, 0x3164, 0x3184, 0x41e5, 0x2103, 0x5289, 0x6b6d, 0x73ae, 0x94b2, 0xce79, 0xa554, 0xad75, 0xa534, 0x9d13, 0x9cf2, 0xb5b6, 0xe73c, 0xe73c, 0xe73c,
    0xf79e, 0xf79e, 0xf79e, 0xf79e, 0xef7e, 0xe73d, 0xe73c, 0xe73c, 0xdefc, 0xb5b6, 0x4207, 0x18e3, 0x18a2, 0x18e2, 0x3144, 0x3164, 0x3164, 0x3164, 0x3164, 0x3164, 0x3144, 0x3984, 0x41e5, 0x41c5, 0x2123, 0x2103, 0x2965, 0x5289, 0x9d12, 0x846e, 0x94b0, 0x94af, 0x8c8e, 0x842d, 0x9cf1, 0xce79, 0xe71c, 0xe73c,
    0xf79e, 0xf79e, 0xf79e, 0xf79e, 0xf79e, 0xef5d, 0xd6db, 0xa534, 0x8c91, 0x632b, 0x2123, 0x18c2, 0x2103, 0x39a5, 0x49c6, 0x49e6, 0x49e6, 0x49e6, 0x49e6, 0x49c7, 0x41c6, 0x41c6, 0x5247, 0x62c8, 0x4a87, 0x4a66, 0x4a87, 0x52e8, 0x6349, 0x52e8, 0x5b09, 0x6348, 0x6348, 0x8cad, 0x9d51, 0xa554, 0xc618, 0xe71c,
    0xf79e, 0xf79e, 0xf79e, 0xf79e, 0xf79e, 0xef5d, 0xce79, 0x6b6c, 0x4a47, 0x52c8, 0x2943, 0x18a1, 0x3144, 0x5207, 0x3965, 0x3945, 0x3945, 0x3945, 0x3945, 0x3944, 0x2923, 0x18c1, 0x18e1, 0x3a04, 0x6388, 0x740a, 0x740a, 0x740a, 0x5ae7, 0x2102, 0x18c2, 0x18c2, 0x18c2, 0x73c9, 0xadb0, 0xadb3, 0xad54, 0xdefb,
    0xf79e, 0xf79e, 0xf79e, 0xf79e, 0xf79e, 0xdedb, 0xa553, 0x6349, 0x52a6, 0x2983, 0x3144, 0x2924, 0x2943, 0x4a07, 0x3945, 0x3945, 0x3945, 0x3945, 0x3124, 0x3164, 0x52a6, 0x6bc9, 0x6ba8, 0x6368, 0x39e5, 0x2944, 0x3185, 0x31a5, 0x39c6, 0x41e7, 0x18c2, 0x9c8f, 0xc5f6, 0x5aaa, 0x4aa6, 0x9d4e, 0xad95, 0xdefb,
    0xf79e, 0xf79e, 0xf79e, 0xf79e, 0xf79e, 0xad55, 0x2985, 0x18e2, 0x18e2, 0x18c2, 0x4a06, 0x41c6, 0x20e3, 0x3144, 0x3144, 0x3144, 0x3145, 0x3945, 0x20c3, 0x31a3, 0x5b27, 0x31c4, 0x2122, 0x2123, 0x6b09, 0xa4cf, 0xbdb5, 0xc617, 0xc617, 0xbdb6, 0x18c2, 0x7b6b, 0xacd0, 0x5268, 0x4a86, 0xa56f, 0xbdd6, 0xdefc,
    0xf79e, 0xf79e, 0xf79e, 0xf79e, 0xf79e, 0xa534, 0x2123, 0x18c2, 0x18c2, 0x18c2, 0x4a07, 0x41c6, 0x18c2, 0x20e2, 0x20e2, 0x20e3, 0x3124, 0x3945, 0x20c2, 0x31a3, 0x5307, 0x3184, 0x6b09, 0x2943, 0x8bec, 0xbd51, 0xc5b3, 0xc5d3, 0xc5d3, 0xbd72, 0x2924, 0x3184, 0x39c5, 0x31a4, 0x4aa7, 0x8ccd, 0xb5d6, 0xdefc,
    0xf79e, 0xf79e, 0xf79e, 0xf79e, 0xef9e, 0xa534, 0x2124, 0x18a2, 0x18c2, 0x18c2, 0x4a07, 0x41c6, 0x10c2, 0x18c2, 0x18c2, 0x18c2, 0x18c2, 0x18a2, 0x18a2, 0x31a3, 0x52e6, 0x18c2, 0x2102, 0x4185, 0x9c4e, 0xc591, 0xc591, 0xc591, 0xbd91, 0xbd92, 0xbdd7, 0x4a08, 0x20e3, 0x52c7, 0x846d, 0xad73, 0xbe17, 0xdefc,
    0xef9e, 0xef9e, 0xef9e, 0xef9e, 0xef9e, 0xb5b6, 0x4a69, 0x18c2, 0x18c2, 0x18c2, 0x3164, 0x3144, 0x10c2, 0x18c2, 0x18c2, 0x18c2, 0x10c2, 0x18c2, 0x18a2, 0x2963, 0x4a85, 0x18c1, 0x10a2, 0x5207, 0xa48e, 0xc591, 0xc591, 0xc591, 0xc571, 0xc572, 0xc5f5, 0x4a07, 0x20e3, 0x5307, 0x846d, 0xa554, 0xce79, 0xdf1c,
    0xef9e, 0xef9e, 0xef9e, 0xef9e, 0xef9e, 0xd69a, 0x8c30, 0x18c2, 0x18c2, 0x18c2, 0x18c2, 0x18c2, 0x18c2, 0x18c2, 0x18c2, 0x18c2, 0x18c2, 0x18c2, 0x18c2, 0x2102, 0x3a04, 0x39e4, 0x18c2, 0x7b4b, 0xacd0, 0xc591, 0xc591, 0xc591, 0xc591, 0xbd71, 0xa4af, 0x39a5, 0x2123, 0x5b29, 0x844d, 0xa534, 0xdefb, 0xe71c,
    0xef9e, 0xef9e, 0xef9e, 0xef9e, 0xef9e, 0xd6ba, 0x9471, 0x18c2, 0x18c2, 0x18c2, 0x18c2, 0x18c2, 0x18c2, 0x18c2, 0x18c2, 0x18c2, 0x18c2, 0x18c2, 0x31a4, 0x31a4, 0x3a05, 0x5b48, 0x18e2, 0x8bec, 0xb510, 0xc591, 0xc591, 0xc591, 0xc572, 0xbd51, 0x72e9, 0x2943, 0x39e5, 0x6b8b, 0x8c90, 0xbdf7, 0xdefc, 0xe71c,
    0xef9e, 0xef9e, 0xef9e, 0xef9e, 0xef9e, 0xd6ba, 0x8c71, 0x18c2, 0x18c2, 0x18c2, 0x18c2, 0x18c2, 0x18c2, 0x18c2, 0x18c2, 0x18c2, 0x18c2, 0x18a2, 0x5b28, 0x5b28, 0x3a05, 0x6368, 0x18e2, 0x8bec, 0xb510, 0xc591, 0xc591, 0xc591, 0xbd71, 0xb511, 0x3144, 0x2103, 0x5307, 0x73ab, 0x9cd2, 0xe71c, 0xe71c, 0xe71c,
    0xef9e, 0xef9e, 0xef9e, 0xef9e, 0xef9e, 0xd6ba, 0x9491, 0x18c2, 0x18c2, 0x18c2, 0x18c2, 0x18c2, 0x18c2, 0x18c2, 0x18c2, 0x18c2, 0x18c1, 0x2123, 0x4225, 0x3a04, 0x3a05, 0x6368, 0x18e2, 0x83ab, 0xa4cf, 0xb530, 0xb530, 0xb530, 0xa48e, 0x7b8b, 0x18c2, 0x4205, 0x634a, 0x842f, 0xad75, 0xe71c, 0xe71c, 0xe71c,
    0xef9e, 0xef9e, 0xef9e, 0xef9e, 0xef9e, 0xd6ba, 0x9491, 0x18e2, 0x18c2, 0x18c2, 0x18c2, 0x18c2, 0x18c2, 0x18c2, 0x18c2, 0x18c2, 0x18c1, 0x4a86, 0x31c3, 0x18e2, 0x3a05, 0x6348, 0x18e2, 0x62a9, 0x8bcc, 0x942d, 0x942d, 0x942d, 0x838b, 0x5a88, 0x18c2, 0x6348, 0x634a, 0xad74, 0xdedb, 0xe71c, 0xe71c, 0xe71c,
    0xef9e, 0xef9e, 0xef9e, 0xef9e, 0xef9e, 0xdedb, 0xad55, 0x7bce, 0x18e2, 0x18c2, 0x18c2, 0x18c2, 0x18c2, 0x18c2, 0x18c2, 0x18c2, 0x18c2, 0x4245, 0x31a4, 0x2103, 0x3a05, 0x5ae7, 0x31a4, 0x6289, 0x838b, 0x940c, 0x940c, 0x940c, 0x6ae9, 0x2923, 0x31a4, 0x6b8a, 0x6b6b, 0xb5b6, 0xe71c, 0xe71c, 0xe71c, 0xe71c,
    0xef7e, 0xef7e, 0xef7e, 0xef7e, 0xef7e, 0xef5d, 0xdedb, 0xa534, 0x2103, 0x18a2, 0x18c2, 0x18c2, 0x18c2, 0x18c2, 0x18c2, 0x18e2, 0x4a66, 0x4226, 0x9cd2, 0xbdf7, 0x8c70, 0x4246, 0x73c9, 0x3164, 0x732a, 0x940c, 0x940c, 0x83ac, 0x4a06, 0x2122, 0x6bc9, 0x634a, 0xa533, 0xd6db, 0xdf1c, 0xdf1c, 0xe71c, 0xe73c,
    0xef7e, 0xef7e, 0xef7e, 0xef7e, 0xef7e, 0xef7e, 0xe71c, 0xb595, 0x2103, 0x18a2, 0x18c1, 0x18c1, 0x18c1, 0x18c1, 0x18c1, 0x18e2, 0x5b09, 0x5288, 0xb5b6, 0xdf1c, 0x9d13, 0x4a87, 0x7c6b, 0x2943, 0x7309, 0x940c, 0x940c, 0x7b6b, 0x3164, 0x2984, 0x740b, 0x6b6b, 0xb596, 0xdf1c, 0xdf1c, 0xdf1c, 0xe71c, 0xef5d,
    0xef7e, 0xef7e, 0xef7e, 0xef7e, 0xef7e, 0xe73d, 0xd69a, 0xbdd7, 0x2103, 0x18a2, 0x18c1, 0x18c1, 0x18c1, 0x18c1, 0x18c2, 0x52a8, 0x5b0a, 0x8c70, 0xd6ba, 0xe73d, 0xad55, 0x632a, 0x84ad, 0x2943, 0x7329, 0x940c, 0x940c, 0x732a, 0x3184, 0x52e7, 0x6b6a, 0x9cf3, 0xce79, 0xdf1c, 0xdf1c, 0xe71c, 0xef5d, 0xef7e,
    0xef7e, 0xef7e, 0xef7e, 0xef7e, 0xef7d, 0xdefb, 0xc638, 0x94b2, 0x2103, 0x18a2, 0x18c2, 0x18c2, 0x18c2, 0x18c2, 0x18e2, 0x8c6e, 0x632b, 0xb596, 0xef7e, 0xef5d, 0xad95, 0x6b8c, 0x846c, 0x2123, 0x5247, 0x6ae9, 0x6ae9, 0x5267, 0x39e5, 0x6bca, 0x5ae9, 0xc638, 0xdefc, 0xdf1c, 0xe71c, 0xe73d, 0xef7e, 0xef7e,
    0xef7e, 0xef7e, 0xef7e, 0xef7e, 0xe71c, 0xce79, 0xbdf7, 0x4228, 0x18c2, 0x18a2, 0x18c1, 0x18c1, 0x18c1, 0x18c2, 0x2123, 0x9cf2, 0x8c71, 0xc638, 0xef7d, 0xe73c, 0xbdd7, 0x7bee, 0x6349, 0x2943, 0x18c2, 0x2923, 0x20e2, 0x18e2, 0x4226, 0x73ab, 0x73ad, 0xce79, 0xdf1c, 0xe71c, 0xe73d, 0xef7e, 0xef7e, 0xef7e,
    0xef7e, 0xef7e, 0xef7e, 0xef7e, 0xd69a, 0x9471, 0x6b4c, 0x39c6, 0x18c2, 0x18a2, 0x18c2, 0x18c2, 0x18c2, 0x2123, 0x4a48, 0x8430, 0xce7a, 0xef7d, 0xdedb, 0xdedb, 0xe71c, 0xa534, 0x2143, 0x6388, 0x3183, 0x6b09, 0x5267, 0x3a05, 0x6349, 0x5b0a, 0xd6ba, 0xdefb, 0xe71c, 0xef5d, 0xef7e, 0xef7e, 0xef7e, 0xef7e,
    0xef9d, 0xef9d, 0xef9d, 0xef9d, 0xce79, 0x8c71, 0x738d, 0x2103, 0x18c2, 0x18c2, 0x18c2, 0x18a2, 0x18a2, 0x2964, 0x5aeb, 0x9cf3, 0xdefb, 0xef9d, 0xd6db, 0xd6db, 0xce59, 0x7baf, 0x18e2, 0x6ba9, 0x31a4, 0x2923, 0x52c7, 0x6b89, 0x52a8, 0x4a48, 0xdefb, 0xdf1c, 0xe75d, 0xef7d, 0xef9d, 0xef9d, 0xef9d, 0xef9d,
    0xef9d, 0xef9d, 0xef9d, 0xef9d, 0xef7d, 0xce79, 0x8c50, 0x18c2, 0x18c1, 0x18c1, 0x18c1, 0x18a2, 0x2103, 0x4207, 0x632c, 0xef5d, 0xef7d, 0xef9d, 0xd6ba, 0xc5f8, 0x9452, 0x5a8a, 0x18c2, 0x5b07, 0x6ba8, 0x73e9, 0x4aa6, 0x39e5, 0x73ad, 0xce58, 0xdefc, 0xef5d, 0xef7d, 0xef9d, 0xef9d, 0xef9d, 0xef9d, 0xef9d,
    0xef7e, 0xef7e, 0xef7e, 0xef7d, 0xce79, 0x8c70, 0x738d, 0x2924, 0x2903, 0x18e2, 0x18c2, 0x18c2, 0x2123, 0x4228, 0x630b, 0xef7d, 0xef7d, 0xef7d, 0xd6ba, 0xb5b6, 0x6b2c, 0x41a7, 0x3124, 0x2963, 0x31c4, 0x31e4, 0x4a26, 0x5a89, 0x9cd2, 0xd6ba, 0xe75d, 0xef7d, 0xef7e, 0xef7e, 0xef7e, 0xef7e, 0xef7e, 0xef7e,
    0xef7e, 0xef7e, 0xef7e, 0xef7d, 0xbdf7, 0x630b, 0x5a89, 0x3945, 0x3144, 0x2904, 0x18c2, 0x18c2, 0x2924, 0x5aaa, 0x840f, 0xa514, 0xad75, 0xd6ba, 0xce9a, 0xb595, 0x7bad, 0x83ac, 0x8c0f, 0x3124, 0x3985, 0x4a27, 0x6ae9, 0x83cd, 0xb553, 0xb575, 0xbdb6, 0xe71c, 0xef7e, 0xef7e, 0xef7e, 0xef7e, 0xef7e, 0xef7e,
    0xef7e, 0xef7e, 0xef7e, 0xef7e, 0xc618, 0x5aeb, 0x3985, 0x3945, 0x3124, 0x2904, 0x18c2, 0x18c2, 0x3965, 0x62ca, 0x7bae, 0x8430, 0x94b2, 0xce79, 0xc618, 0xa4f3, 0x8bed, 0xacf0, 0xc5f5, 0x3145, 0x5207, 0x838b, 0x838b, 0x7b6b, 0x942f, 0xad12, 0xb575, 0xb575, 0xb575, 0xb575, 0xb575, 0xb575, 0xc618, 0xef5d,
    0xef7e, 0xef7e, 0xef7e, 0xef7e, 0xc639, 0x5aea, 0x2103, 0x3124, 0x3104, 0x18e3, 0x18c2, 0x28e3, 0x4186, 0x5227, 0x4227, 0x9c71, 0xad34, 0xce79, 0xad55, 0x8c0f, 0x732a, 0x9c4e, 0xbd71, 0x2123, 0x4a07, 0x7b4b, 0x6aea, 0x5248, 0x6aea, 0xad32, 0xce38, 0x9450, 0x8bee, 0x8bee, 0x8bee, 0x83ce, 0x9cb1, 0xe73c,
    0xef7e, 0xef7e, 0xef7e, 0xef7e, 0xd69a, 0x73ad, 0x2944, 0x18a2, 0x18c2, 0x20e3, 0x3985, 0x3986, 0x3145, 0x2903, 0x18c2, 0x3124, 0x4a08, 0x738d, 0x5aeb, 0x5248, 0x6ac9, 0x942d, 0xb510, 0x3164, 0x4a07, 0x5a68, 0x5a48, 0x4a07, 0x3985, 0x6288, 0x8bcc, 0xb511, 0xbd51, 0xb551, 0xb553, 0x9491, 0x840f, 0xe71c,
    0xef7e, 0xef7e, 0xef7e, 0xef7e, 0xdedb, 0x94b2, 0x4a48, 0x2103, 0x2103, 0x31a6, 0x630b, 0x5aca, 0x3165, 0x18e3, 0x18e2, 0x20e2, 0x2103, 0x2944, 0x2944, 0x2123, 0x4a26, 0x83cc, 0x8bed, 0x4a68, 0x5aca, 0x5aca, 0x5aaa, 0x5269, 0x4207, 0x5a89, 0x6289, 0x83ac, 0x8bec, 0x8bcc, 0x62e9, 0x31a6, 0x6b6d, 0xe71c,
    0xef7e, 0xef7e, 0xef7e, 0xef7e, 0xef7d, 0xce59, 0x8c71, 0x5aeb, 0x4207, 0x39e7, 0xb5d6, 0xa513, 0x39c6, 0x39c6, 0x39c6, 0x39c6, 0x39c6, 0x39c6, 0x39e6, 0x4207, 0x4a48, 0x52a9, 0x5aa9, 0x5289, 0xb5b6, 0xdefb, 0xdefb, 0xb5b6, 0x4207, 0x4207, 0x39c6, 0x39c6, 0x39c6, 0x39a5, 0x3185, 0x5aeb, 0xd6ba, 0xef7d};
Sprite player1 = {tile_new, TILE_NEW_WIDTH, TILE_NEW_HEIGHT, 200, 200, 30};
Sprite player2 = {tile_new, TILE_NEW_WIDTH, TILE_NEW_HEIGHT, 150, 180, 30};
uint32_t adc_val1, adc_val2, adc_val3;
uint8_t reset_state = 0;
uint8_t game_state = 0;
int8_t acc_y1 = 0;
int8_t acc_y2 = 0;
int8_t acc_x = 0;
uint8_t player_xVel = 1;
uint8_t player_yVel = 1;
uint16_t MaxTime = 5;
uint16_t posX = 10;
uint16_t posY = 40;

//
//
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void re_block(void);
bool isCrashPaddle1(void);
bool isFallPaddle1(void);
bool isCrashPaddle2(void);
bool isFallPaddle2(void);
bool isCheckCrashPaddle(void);
void block_1(void);
void block_2(void);
void block_3(void);
void gavity(void);
void Read_Controller(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART3_UART_Init();
  MX_SPI5_Init();
  MX_RNG_Init();
  MX_TIM1_Init();
  MX_ADC1_Init();
  /* USER CODE BEGIN 2 */
  ILI9341_Init(); // initial driver setup to drive ili9341
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    ILI9341_Fill_Screen(WHITE);
    ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
    block_1();
    block_2();
    block_3();
    ILI9341_Draw_Sprite(player1.bitmap, player1.width, player1.height, player1.x, player1.y);
    ILI9341_Draw_Sprite(player2.bitmap, player2.width, player2.height, player2.x, player2.y);
    game_state = 1;
    while (game_state)
    {
        HAL_ADC_Start(&hadc1);
        HAL_ADC_PollForConversion(&hadc1, 100);
        adc_val1 = HAL_ADC_GetValue(&hadc1);

        HAL_ADC_PollForConversion(&hadc1, 100);
        adc_val2 = HAL_ADC_GetValue(&hadc1);
        HAL_ADC_Stop(&hadc1);
        Read_Controller();
        gavity();
        if(isCrashPaddle1() || isCrashPaddle2()){
          re_block();
        }
        if(isCheckCrashPaddle()){
          ILI9341_Draw_Sprite(player1.bitmap, player1.width, player1.height, player1.x, player1.y);
          ILI9341_Draw_Sprite(player2.bitmap, player2.width, player2.height, player2.x, player2.y);
          block_1();
          block_2();
          block_3();
        }
      if(isFallPaddle1() && acc_y1 != 1){
        acc_y1 = -1;
      }
      if(isFallPaddle2() && acc_y2 != 1){
          acc_y2 = -1;
      }
    }
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 216;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 9;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
void Read_Controller(void)
{
  if (adc_val1 < 1000 || adc_val1 > 3000)
  {
    ILI9341_Draw_Rectangle(player1.x, player1.y, player1.width + 1, player1.height + 1, WHITE);
    player1.x = (adc_val1 < 1000) ? player1.x += player_xVel : player1.x; // left
    player1.x = (adc_val1 > 3000) ? player1.x -= player_xVel : player1.x; // right
    ILI9341_Draw_Sprite(player1.bitmap, player1.width, player1.height, player1.x, player1.y);
  }
  if (adc_val2 < 1000 || adc_val2 > 3000)
  {
    ILI9341_Draw_Rectangle(player2.x, player2.y, player2.width + 1, player2.height + 1, WHITE);
    player2.x = (adc_val2 < 1000) ? player2.x += player_xVel : player2.x; // left
    player2.x = (adc_val2 > 3000) ? player2.x -= player_xVel : player2.x; // right
    ILI9341_Draw_Sprite(player2.bitmap, player2.width, player2.height, player2.x, player2.y);
  }
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if (GPIO_Pin == GPIO_PIN_6)
	{
		acc_y2 = 1;
	}
}

// ส่วนของตัวเกม
void re_block(void)
{
  if ((player1.y == 92) && (player1.x >= 170 && player1.x <= 320) || (player2.y == 92) && (player2.x >= 170 && player2.x <= 320))
  {
    ILI9341_Draw_Rectangle(170, 120, 150, 32, 0x9ff3);
  }
  else if ((player1.y == 92) && (player1.x >= 72 && player1.x <= 222) || (player2.y == 92) && (player2.x >= 72 && player2.x <= 222))
  {
    ILI9341_Draw_Rectangle(72, 60, 150, 32, 0x9ff3);
  }
  else if ((player1.y == 32) && (player1.x >= 0 && player1.x <= 150) || (player2.y == 32) && (player2.x >= 0 && player2.x <= 150))
  {
    ILI9341_Draw_Rectangle(0, 0, 150, 32, 0x9ff3);
  }
}

bool isCrashPaddle1(void)
{
  bool isCrashPaddle = true;
  if (((player1.y == 152) && (player1.x >= 170 && player1.x <= 320)))
  {
    return isCrashPaddle;
  }
  else if (((player1.y == 92) && (player1.x >= 72 && player1.x <= 222)))
  {
    return isCrashPaddle;
  }
  else if (((player1.y == 32) && (player1.x >= 0 && player1.x <= 150)))
  {
    return isCrashPaddle;
  }
  return !(isCrashPaddle);
}

bool isCrashPaddle2(void)
{
  bool isCrashPaddle = true;
  if (((player2.y == 152) && (player2.x >= 170 && player2.x <= 320)))
  {
    return isCrashPaddle;
  }
  else if (((player2.y == 92) && (player2.x >= 72 && player2.x <= 222)))
  {
    return isCrashPaddle;
  }
  else if (((player2.y == 32) && (player2.x >= 0 && player2.x <= 150)))
  {
    return isCrashPaddle;
  }
  return !(isCrashPaddle);
}
bool isFallPaddle1(void)
{
  if (((player1.y >= 152) && !(player1.x >= 170 && player1.x <= 320)))
  {
    return true;
  }
  else if (((player1.y >= 92) && !(player1.x >= 72 && player1.x <= 222)))
  {
    return true;
  }
  else if (((player1.y >= 32) && !(player1.x >= 0 && player1.x <= 150)))
  {
    return true;
  }
  return false;
}
bool isFallPaddle2(void)
{
  if (((player2.y >= 152) && !(player2.x >= 170 && player2.x <= 320)))
  {
    return true;
  }
  else if ((player2.y >= 92 && !(player2.x >= 72 && player2.x <= 222)))
  {
    return true;
  }
  else if (((player2.y >= 32) && !(player2.x >= 0 && player2.x <= 150)))
  {
    return true;
  }
  return false;
}
bool isCheckCrashPaddle(void)
{
  if (player1.x >= 170 && player1.x - player1.width / 2 <= 320 && player1.y != 152)
  {
    return true;
  }
  if (player1.x  >= 72 && player1.x - player1.width / 2 <= 222 && player1.y != 92)
  {
    return true;
  }
  if (player1.x  >= 0 && player1.x - player1.width / 2 <= 150 && player1.y != 32)
  {
    return true;
  }

  if (player2.x >= 170 && player2.x - player2.width / 2 <= 320 && player2.y != 152)
  {
    return true;
  }
  if (player2.x >= 72 && player2.x - player2.width / 2 <= 222 && player2.y != 92)
  {
    return true;
  }
  if (player2.x  >= 0 && player2.x - player2.width / 2 <= 150 && player2.y != 32)
  {
    return true;
  }
  return false;
}
void block_1(void)
{
  ILI9341_Draw_Rectangle(170, 120, 150, 32, 0x9ff3);
  // x_pos >=144 && x_pos<=176 && y_pos >=140 && y_pos <=290
}
void block_2(void)
{
  ILI9341_Draw_Rectangle(72, 60, 150, 32, 0x9ff3);
  // x_pos >=72 && x_pos<=222 && y_pos >=60 && y_pos <=92
}
void block_3(void)
{
  ILI9341_Draw_Rectangle(0, 0, 150, 32, 0x9ff3);
  // x_pos >=0 && x_pos<=150 && y_pos >=0 && y_pos <=32
}
void gavity()
{
	if(acc_y1 == 1){
		player1.jump--;
	    if (player1.jump <= 0)
	    {
	      player1.jump = 30;
	      acc_y1 = -1;
	    }
	    ILI9341_Draw_Rectangle(player1.x, player1.y, player1.width + player_xVel, player1.height + player_yVel, WHITE);
	    player1.y += player_yVel * acc_y1;
	    ILI9341_Draw_Sprite(player1.bitmap, player1.width, player1.height, player1.x, player1.y);
	}
	if(acc_y2 == 1){
		player2.jump--;
		if (player2.jump <= 0)
		{
			player2.jump = 30;
			acc_y2 = -1;
		}
	    ILI9341_Draw_Rectangle(player2.x, player2.y, player2.width + player_xVel, player2.height + player_yVel, WHITE);
	    player2.y += player_yVel * acc_y2;
	    ILI9341_Draw_Sprite(player2.bitmap, player2.width, player2.height, player2.x, player2.y);
	}
  if (acc_y1 == -1)
  {
    if (isCrashPaddle1())
    {
      acc_y1 = 0;
    }
    ILI9341_Draw_Rectangle(player1.x, player1.y, player1.width + player_xVel, player1.height + player_yVel, WHITE);
    player1.y += player_yVel * acc_y1;
    ILI9341_Draw_Sprite(player1.bitmap, player1.width, player1.height, player1.x, player1.y);
  }
  if (acc_y2 == -1)
  {
    if (isCrashPaddle2())
    {
      acc_y2 = 0;
    }
    ILI9341_Draw_Rectangle(player2.x, player2.y, player2.width + player_xVel, player2.height + player_yVel, WHITE);
    player2.y += player_yVel * acc_y2;
    ILI9341_Draw_Sprite(player2.bitmap, player2.width, player2.height, player2.x, player2.y);
  }
}
// ส่วนของตัวเกม

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
